@page "/expense"
@inject IExpenseRepository _expenseRepository
@inject IJSRuntime _jsRuntime

<_DeleteConfirmation IsParentComponentProcessing="IsLoading" ConfirmationChanged="ConfirmDelete_Click"></_DeleteConfirmation>
<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-info">Expense List</h4>
    </div>
    <div class="col-5 offset-1">
        <a href="expense/create" class="btn btn-primary form-control">Add New Expense</a>
    </div>
    <div class="col-12">
        @if (Expenses.Any())
        {
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Necessary</th>
                        <th>Redundant</th>
                        <th>Category</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var objExp in Expenses)
                    {
                        <tr>
                            <td>
                                @objExp.Name
                            </td>
                            <th>
                                <input type="checkbox" disabled checked="@objExp.IsCommon">
                            </th>
                            <th>
                                <input type="checkbox" disabled checked="@objExp.IsUncommon">
                            </th>
                            <th>
                                @objExp.ExpenseCategory.Name
                            </th>
                            <td>
                                <NavLink href="@($"expense/edit/{objExp.Id}")" class="btn btn-primary">Edit</NavLink>
                                <NavLink href="@($"category")" class="btn btn-primary">View Categories</NavLink>
                                <button class="btn btn-danger" @onclick="()=>HandleDelete(objExp.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            if (IsLoading)
            {
                //Loading gif
                <div class="text-center">
                    <img src="/images/Loading_Circle.gif">
                </div>
            }
            else
            {
                //No Records
                <p>No Expenses Found</p>
            }
        }
    </div>
</div>

@code {
    private IEnumerable<ExpenseDTO> Expenses { get; set; } = new List<ExpenseDTO>();
    public bool IsLoading { get; set; }
    private int DeleteExpenseId { get; set; } = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadExpenses();
        }
    }

    private async Task LoadExpenses()
    {
        IsLoading = true;
        StateHasChanged();
        Expenses = await _expenseRepository.GetAll();
        IsLoading = false;
        StateHasChanged();
    }

    private void HandleDelete(int id)
    {
        DeleteExpenseId = id;
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading = true;
        if (isConfirmed && DeleteExpenseId != 0)
        {
            await Task.Delay(2000);
            //delete
            await _expenseRepository.Delete(DeleteExpenseId);
            await LoadExpenses();
            await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsLoading = false;
    }
}
