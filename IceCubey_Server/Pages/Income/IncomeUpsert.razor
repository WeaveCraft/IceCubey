@page "/income/create"
@page "/income/edit/{id:int}"
@inject IIncomeRepository _incomeRepository
@inject ICategoryRepository _categoryRepository
@inject NavigationManager _navigationManager
@inject IFileUpload _fileUpload
@inject IJSRuntime _jsRuntime

<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ml-3">@Title Income</h3>

    <div class="col-10">
        @if (IsLoading)
        {
            <div class="text-center">
                <img src="/images/Loading_Multiple.gif">
            </div>
        }
        else
        {
            <EditForm Model="Income" OnValidSubmit="UpsertIncome">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Name</label>
                    <InputText @bind-Value="Income.Name" class="form-control"></InputText>
                    <ValidationMessage For="()=>Income.Name"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label>Amount</label>
                    <InputNumber @bind-Value="Income.Amount" class="form-control"></InputNumber>
                    <ValidationMessage For="()=>Income.Amount"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label>Date</label>
                    <InputDate @bind-Value="Income.Date" class="form-control"></InputDate>
                    <ValidationMessage For="()=>Income.Date"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label>Description</label>
                    <SfRichTextEditor @bind-Value="Income.Description" class=""> </SfRichTextEditor>
                    <ValidationMessage For="()=>Income.Description"></ValidationMessage>
                </div>

                <div class="row pt-3">
                    <div class="btn-group col-6">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="Income.IsCommon" class="form-check-input"></InputCheckbox>
                            <label class="form-check-label">Necessary</label>
                        </div>
                    </div>
                    <div class="btn-group col-6">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="Income.IsUncommon" class="form-check-input"></InputCheckbox>
                            <label class="form-check-label">Redundant</label>
                        </div>
                    </div>
                    <div class="form-group col-6">
                        <DialogModal></DialogModal>
                        <InputSelect @bind-Value="Income.CategoryId" class="form-select">
                            <option value="0" disabled="disabled" selected=>Select Category</option>
                            @foreach (var cat in Categories)
                            {
                            <option value="@cat.Id">@cat.Name</option>
                            }

                    </InputSelect>
                    <ValidationMessage For="()=>Income.CategoryId"></ValidationMessage>
                </div>

                <div class="form-group col-6">
                    <InputFile OnChange="HandleImageUpload"></InputFile>
                </div>
            </div>

            <div class="form-group py-2">
                <button class="btn btn-primary">@Title</button>
                <NavLink href="income" class="btn btn-secondary">Back to Index</NavLink>
            </div>
        </EditForm>
        }
    </div>
</div>
<div class="col-md-2">
    <img src="@Income.ImageUrl" class="w-100" />
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private IncomeDTO Income { get; set; } = new()
        {
            ImageUrl = "/images/default_image.png"
        };
    private IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();
    private string Title { get; set; } = "Add";
    public bool IsLoading { get; set; }
    public string OldImageUrl { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadIncome();
        }
    }

    private async Task LoadIncome()
    {
        IsLoading = true;
        StateHasChanged();
        Categories = await _categoryRepository.GetAll();
        if (Id != 0)
        {
            //update
            Title = "Update";
            Income = await _incomeRepository.Get(Id);
            OldImageUrl = Income.ImageUrl;
        }
        IsLoading = false;
        StateHasChanged();
    }

    private async Task UpsertIncome()
    {
        if (Income.Id == 0)
        {
            //create
            await _incomeRepository.Create(Income);
            await _jsRuntime.ToastrSuccess("Income Created!");
        }
        else
        {
            //update
            if (OldImageUrl != Income.ImageUrl)
            {
                _fileUpload.DeleteFile(OldImageUrl);
            }
            await _incomeRepository.Update(Income);
            await _jsRuntime.ToastrSuccess("Expense Updated!");
        }

        _navigationManager.NavigateTo("income");
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        IsLoading = true;
        try
        {
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" ||
                    fileInfo.Extension.ToLower() == ".png" ||
                    fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        Income.ImageUrl = await _fileUpload.UploadFile(file);
                    }
                    else
                    {
                        await _jsRuntime.ToastrError("Select .jpg/.jpeg/.png Files Only");
                        return;
                    }
                }
            }
            IsLoading = false;

        }
        catch (Exception ex)
        {
            await _jsRuntime.ToastrError(ex.Message);
        }
    }
}
